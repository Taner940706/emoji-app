{"ast":null,"code":"var _jsxFileName = \"/home/taner/React/emojie-app/src/components/Emojies.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport 'react-dom';\nimport classes from './Emojies.module.css';\nimport Card from './UI/Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Emojies = props => {\n  _s();\n  const [emojies, setEmojies] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [httpError, SetHttpError] = useState();\n  useEffect(() => {\n    const fetchEmojies = async () => {\n      const response = await fetch('https://emojihub.yurace.pro/api/random');\n      const responseData = await response.json();\n      if (!response.ok) {\n        throw new Error(\"Doesn't show available emojies!\");\n      }\n      const loadEmojies = [];\n      for (const key in responseData) {\n        loadEmojies.push({\n          id: key,\n          name: responseData[key].name,\n          category: responseData[key].category,\n          group: responseData[key].group,\n          htmlCode: responseData[key].htmlCode,\n          unicode: responseData[key].unicode\n        });\n      }\n      setEmojies(loadEmojies);\n      setLoading(false);\n    };\n    fetchEmojies().catch(error => {\n      setLoading(false);\n      SetHttpError(error.message);\n    });\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.MealsLoading,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this);\n  }\n  if (httpError) {\n    reyrn( /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: httpError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this));\n  }\n  const allemojies = emojies;\n  console.log(allemojies.map(emojie => console.log(emojie.name)));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: allemojies.map(emoji => {\n      /*#__PURE__*/_jsxDEV(Card, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: emoji.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: emoji.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 5\n      }, this);\n    })\n  }, void 0, false);\n};\n_s(Emojies, \"3TUEDpMG77rQdbn8d1oYDhqgceg=\");\n_c = Emojies;\nexport default Emojies;\nvar _c;\n$RefreshReg$(_c, \"Emojies\");","map":{"version":3,"names":["React","useState","useEffect","classes","Card","jsxDEV","_jsxDEV","Fragment","_Fragment","Emojies","props","_s","emojies","setEmojies","loading","setLoading","httpError","SetHttpError","fetchEmojies","response","fetch","responseData","json","ok","Error","loadEmojies","key","push","id","name","category","group","htmlCode","unicode","catch","error","message","className","MealsLoading","children","fileName","_jsxFileName","lineNumber","columnNumber","reyrn","allemojies","console","log","map","emojie","emoji","_c","$RefreshReg$"],"sources":["/home/taner/React/emojie-app/src/components/Emojies.tsx"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport 'react-dom';\nimport classes from './Emojies.module.css';\n\nimport Card from './UI/Card';\n\nconst Emojies: React.FC = (props) => {\n\n  const [emojies, setEmojies] = useState<{id: string, name: string, category: string, group: string, htmlCode: string, unicode: string}[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [httpError, SetHttpError] = useState();\n\n  useEffect(() => {\n    const fetchEmojies = async () => {\n      const response = await fetch('https://emojihub.yurace.pro/api/random');\n      const responseData = await response.json();\n\n      if (!response.ok){\n        throw new Error(\"Doesn't show available emojies!\")\n      }\n      const loadEmojies = [];\n      for (const key in responseData){\n        loadEmojies.push({\n          id: key,\n          name: responseData[key].name,\n          category: responseData[key].category,\n          group: responseData[key].group,\n          htmlCode: responseData[key].htmlCode,\n          unicode: responseData[key].unicode, \n        });\n      }\n      setEmojies(loadEmojies);\n      setLoading(false);\n    };\n    fetchEmojies().catch((error) => {\n      setLoading(false);\n      SetHttpError(error.message);\n    })\n  }, []);\n\n  if (loading){\n    return (\n      <section className={classes.MealsLoading}>\n        <p>Loading...</p>\n      </section>\n    )\n  }\n\n  if (httpError){\n    reyrn (\n      <section>\n        <p>{httpError}</p>\n      </section>\n    )\n  }\n\n  const allemojies = emojies;\n  console.log(allemojies.map(emojie => console.log(emojie.name)));\n\n  return <>\n   {allemojies.map(emoji =>{\n    <Card>\n    <p>{emoji.id}</p>\n    <p>{emoji.name}</p>\n    </Card>\n   })}\n  \n  </>\n}\n\nexport default Emojies;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}